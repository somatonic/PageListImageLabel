<?php

/**
 * PageListImageLabel ProcessWire module
 *
 * @author Philipp "Soma" Urlich
 * @created 08/05/2012
 * @last_modified 07/10/2013
 *
 * ProcessWire 2.x
 * Copyright (C) 2010 by Ryan Cramer
 * Licensed under GNU/GPL v2, see LICENSE.TXT
 *
 * http://www.processwire.com
 * http://www.ryancramer.com
 *
 */

class PageListImageLabel extends WireData implements Module,ConfigurableModule {

	protected $pageLabelField = 'title';

	protected static $defaults = array(
		'pageLabelImageSize' => '0,50',
		'containerWidth' => 'auto',
		'containerHeight' => 'auto',
		'containerPadding' => '5px',
		'backgroundColor' => '#333',
		'borderColor' => '#000',
		'textColor' => '#aaa',
		'noImageText' => 'N/A'
	);

	/**
	 * getModuleInfo is a module required by all modules to tell ProcessWire about them
	 *
	 * @return array
	 *
	 */
	public static function getModuleInfo() {

		return array(
			'title' => 'Page List Image Label',
			'version' => 105,
			'summary' => 'Adds an thumbnail as label for pages. To enable add an image field to a page and add that to the advanced page label options in the template settings. You can output an thumbnail (Thumbnail Module) using dot notation (fieldname.thumbnailname)',
			'autoload' => true
			);
	}

	public function init() {
		$this->config->styles->add($this->config->urls->PageListImageLabel . "PageListImageLabel.css");
		$this->addHookBefore('ProcessPageListRender::getPageLabel', $this, 'addImageLabel');
	}

	public function addImageLabel( HookEvent $event ) {

		$event->replace = true;
		$page = $event->arguments('page');

		if(isset($event->arguments[1]) && isset($event->arguments[1]['noTags']) && $event->arguments[1]['noTags']) {
			$event->return = $page->title;
			return;
		}

		//$event->return = $title;

		$options = self::$defaults;
		foreach($options as $key => $unused) {
			$options[$key] = $this->get($key) ? $this->get($key) : $options[$key];
		}

		$value = '';
		$icon = '';

		// if the page's template specifies a pageLabelField, use that
		$pageLabelField = trim($page->template->pageLabelField);

		// otherwise use the one specified with this instance
		if(!strlen($pageLabelField)) $pageLabelField = $this->pageLabelField;

		// convert to array
		if(strpos($pageLabelField, ' ')) $fields = explode(' ', $pageLabelField);
			else $fields = array($pageLabelField);

		foreach($fields as $field) {

			$has_thumb = false;
			$subfield = '';

			if(strpos($field, ".")) {
				list($field, $subfield) = explode(".", $field);
			} else if(strpos($field, 'icon-') === 0 || strpos($field, 'fa-') === 0) {
				$field = str_replace(array('icon-', 'fa-'), 'fa-', $field);
				$field = $this->wire('sanitizer')->name($field);
				if(!$icon) $icon = "<i class='icon fa $field'></i>";
				continue;
			}

			// $page->of(false);
			$v = $page->get($field);

			// check for page image fields
			if($v instanceof Pageimages || $v instanceof Pageimage) {

				$styles = " style='";
				$styles .= 'border: 1px solid ' . $options['borderColor'] . ";";
				$styles .= 'background-color:' . $options['backgroundColor'] . ";";
				$styles .= 'width:' . $options['containerWidth'] . ";";
				$styles .= 'height:' . $options['containerHeight'] . ";";
				$styles .= 'padding:' . $options['containerPadding'] . ";";
				$styles .= 'color:' . $options['textColor'] . ";'";

				$thumb_url = '';
				$size = explode(",", $options['pageLabelImageSize']);

				// if image field is of type cropimage (thumbnails module)
				if($this->fields->get($field)->type == "FieldtypeCropImage") {
					if($v instanceof WireArray && count($v)) {
						$thumb_url = $v->first()->getThumb($subfield);
						$thumb_url = $v->url . $this->resizeThumb($v, $thumb_url, $size);
					} elseif($v) {
						$thumb_url = $v->getThumb($subfield);
						$thumb_url = $v->url . $this->resizeThumb($v, $thumb_url, $size);
					}

				} else { // all normal image fields
					if($v instanceof WireArray && count($v)) {
						$thumb_url = $page->$field->first()->size($size[0],$size[1])->url;
					} elseif($v) {
						$thumb_url = $page->$field->size($size[0],$size[1])->url;
					}
				}

				if(strlen(trim($thumb_url))) {
					$thumb_url .= "?vt=" . time();
					$v = "<span class='label-image'{$styles}><img src='" . $thumb_url . "'/></span>";
				}
				// else {
				// 	$v = "<span class='label-image'{$styles}><span>" . $options['noImageText'] . "$thumb_url</span></span>";
				// }

				$has_thumb = true;
			}

			if($subfield && is_object($v)) {
				if($v instanceof WireArray && count($v)) $v = $v->first();
				$v = $v->get($subfield);

			} else if(($field == 'created' || $field == 'modified') && ctype_digit("$v")) {
				$v = date($this->fuel('config')->dateFormat, (int) $v);
			}

			if($v) {
				// only append comma "," if there's no thumbnail
				$value .= $has_thumb ? "$v " : "$v, ";
			}
		}

		if(!strlen($value)) $value = $page->get($this->pageLabelField);
			else $value = substr($value,0,-2);

		$value = strip_tags($value, '<img><span>');
		//$value = htmlspecialchars($value, ENT_XHTML, "UTF-8", false);
		$event->return = $icon . trim($value);
	}

	private function resizeThumb($field, $thumb_url, $size){
		$thumb_path = $field->path() . basename($thumb_url);
		$filename = $size[0] . "x" . $size[1] . "_" . basename($thumb_url);
		$thumb_path_new = $field->path() . $filename;
		// if already exists, no need to resize again
		if(file_exists($thumb_path_new)) return $filename;
		if(@copy($thumb_path, $thumb_path_new)){
			$sizer = new ImageSizer($thumb_path_new);
			$sizer->resize($size[0],$size[1]);
			return $filename;
		} else return false;
	}

	/**
	 * Build a form allowing configuration of this Module
	 *
	 */
	static public function getModuleConfigInputfields(array $data) {

		$data = array_merge(self::$defaults, $data);

		$fields = new InputfieldWrapper();
		$modules = Wire::getFuel("modules");

		$field = $modules->get("InputfieldText");
		$field->attr('name', 'pageLabelImageSize');
		$field->attr('size', 10);
		$field->attr('value', $data['pageLabelImageSize']);
		$field->label = "Thumbnail size";
		$field->description = "Thumbnail size. Specify two number comma separated. Will be ignored if field is of type FieldtypeCropImage (thumbnail module).";
		$field->notes = "Example: 100,100 or 0,50";
		$fields->append($field);

		$field = $modules->get("InputfieldText");
		$field->attr('name', 'containerWidth');
		$field->attr('size', 10);
		$field->attr('value', $data['containerWidth']);
		$field->label = "Container width";
		$field->description = "Width of the container in css value (px,%,em...)";
		$field->notes = "Example: 100px";
		$fields->append($field);

		$field = $modules->get("InputfieldText");
		$field->attr('name', 'containerHeight');
		$field->attr('size', 10);
		$field->attr('value', $data['containerHeight']);
		$field->label = "Container height";
		$field->description = "Height of the container in css value (px,%,em...)";
		$field->notes = "Example: 100px";
		$fields->append($field);

		$field = $modules->get("InputfieldText");
		$field->attr('name', 'containerPadding');
		$field->attr('size', 10);
		$field->attr('value', $data['containerPadding']);
		$field->label = "Container padding";
		$field->description = "Padding of the container in css value (px,%,em...)";
		$field->notes = "Example: 10px";
		$fields->append($field);

		$field = $modules->get("InputfieldText");
		$field->attr('name', 'backgroundColor');
		$field->attr('size', 10);
		$field->attr('value', $data['backgroundColor']);
		$field->label = "Container background color";
		$field->description = "HEX background color of the container (#444)";
		$fields->append($field);

		$field = $modules->get("InputfieldText");
		$field->attr('name', 'borderColor');
		$field->attr('size', 10);
		$field->attr('value', $data['borderColor']);
		$field->label = "Container border color";
		$field->description = "Border color of the container (#000)";
		$fields->append($field);

		$field = $modules->get("InputfieldText");
		$field->attr('name', 'textColor');
		$field->attr('size', 10);
		$field->attr('value', $data['textColor']);
		$field->label = "Text color";
		$field->description = "Text color of the container (#aaa)";
		$fields->append($field);

		$field = $modules->get("InputfieldText");
		$field->attr('name', 'noImageText');
		$field->attr('size', 10);
		$field->attr('value', $data['noImageText']);
		$field->label = "No-Image Text";
		$field->description = "Text as placeholder if no image populated.";
		$fields->append($field);

		return $fields;
	}
}