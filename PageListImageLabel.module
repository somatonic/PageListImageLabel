<?php

/**
 * PageListImageLabel ProcessWire module
 *
 * @author Philipp "Soma" Urlich
 *
 * ProcessWire 2.x
 * Copyright (C) 2010 by Ryan Cramer
 * Licensed under GNU/GPL v2, see LICENSE.TXT
 *
 * http://www.processwire.com
 * http://www.ryancramer.com
 *
 */

class PageListImageLabel extends WireData implements Module,ConfigurableModule {

	protected $pageLabelField = 'title';
	private $templatesArray = array();

	protected static $defaults = array(
		'pageLabelTemplates' => '',
		'pageLabelImageSize' => '0,50',
		'containerWidth' => 'auto',
		'containerHeight' => 'auto',
		'containerPadding' => '5px',
		'backgroundColor' => '#333',
		'borderColor' => '#000',
		'textColor' => '#aaa',
		'noImageText' => 'N/A'
	);

	/**
	 * getModuleInfo is a module required by all modules to tell ProcessWire about them
	 *
	 * @return array
	 *
	 */
	public static function getModuleInfo() {

		return array(
			'title' => 'Page List Image Label',
			'version' => 201,
			'summary' => 'Adds an thumbnail as label for pages. To enable add an image field to a page and add that to the advanced page label options in the template settings. You can output an thumbnail (Thumbnail Module) using dot notation (fieldname.thumbnailname)',
			'autoload' => true
			);
	}


	public function init() {

		$this->config->styles->add($this->config->urls->PageListImageLabel . "PageListImageLabel.css");

		$options = self::$defaults;
		foreach(self::$defaults as $key => $unused) {
			$this->$key = $this->get($key) ?: $options[$key];
		}

		// prepare the templates array and add it to $this->templatesArray
		if(!trim($this->pageLabelTemplates)) {
			$this->warning($this->_("Warning: No templates specified."));

		} else {
			$templatesString = trim($this->pageLabelTemplates);
			$templatesString = str_replace(" ", "", $templatesString);
			$templatesString = str_replace("\r", "", $templatesString);

			// build array for templates config
			$tplsArray = explode("\n", $templatesString);
			$tpls = array();
			foreach($tplsArray as $tpl) {
				if(strpos($tpl, ",") !== false){
					list($tplname, $field) = explode(",", $tpl);
					$tpls[$tplname][] = $field;
				} else {
					$this->error(sprintf($this->_("Templates '%s' configuration is a field missing..."),$tpl));
				}
			}

			$this->templatesArray = $tpls;

			// only add hook when we get this far
			$this->addHookAfter('ProcessPageListRender::getPageLabel', $this, 'addImageLabel');

		}

	}

	/**
	 * Hook to add thumbnail to pages that uses a template configured
	 *
	 * @param HookEvent $event ProcessWire hook event object to get the page argument
	 */
	public function addImageLabel( HookEvent $event ) {

		// $event->replace = true;
		$page = $event->arguments('page');

		// fix page tree menu label, #4 adrian
		if(isset($event->arguments[1]) && $event->arguments[1]['noTags']) {
			return;
		}

		if(!isset($this->templatesArray[$page->template->name])) return;

		$tpl = $this->templatesArray[$page->template->name];
		$field = $this->templatesArray[$page->template->name][0];
		$subfield = "";

		// if subfield found add it
		// currently only for the cropimage fields
		if(strpos($field, ".") !== false){
			list($field, $subfield) = explode(".", $field);
		}

		$v = $page->get($field);

		// check for page image fields
		if($v instanceof Pageimages || $v instanceof Pageimage) {

			$styles = " style='";
			$styles .= 'border: 1px solid ' . $this->borderColor . ";";
			$styles .= 'background-color:' . $this->backgroundColor . ";";
			$styles .= 'width:' . $this->containerWidth . ";";
			$styles .= 'height:' . $this->containerHeight . ";";
			$styles .= 'padding:' . $this->containerPadding . ";";
			$styles .= 'color:' . $this->textColor . ";'";

			$thumb_url = '';
			$size = explode(",", $this->pageLabelImageSize);

			// if image field is of type cropimage (thumbnails module) /
			// maybe could be removed as nobody uses that old field anymore?
			if($this->fields->get($field)->type == "FieldtypeCropImage" && $subfield) {

				if($v instanceof Pageimages && count($v)) {
					$thumb_url = $v->first()->getThumb($subfield);
					$thumb_url = $v->url . $this->resizeThumb($v, $thumb_url, $size);
				} elseif($v instanceof Pageimage && $v) {
					$thumb_url = $v->getThumb($subfield);
					$thumb_url = $v->pagefiles->url . $this->resizeThumb($v, $thumb_url, $size);
				}

			// another image type doh! (thumbnails module 2). wait there will be more ;)
			} else if($this->fields->get($field)->type == "FieldtypeCroppableImage"
				|| $this->fields->get($field)->type == "FieldtypeCroppableImage3"
				&& $subfield) {

				if($v instanceof Pageimages && count($v)) {
					$thumb_url = $v->first()->getCrop($subfield);
					$thumb_url = $v->url . $this->resizeThumb($v, $thumb_url, $size);
				} elseif($v instanceof Pageimage && $v) {
					$thumb_url = $v->getCrop($subfield);
					$thumb_url = $v->pagefiles->url . $this->resizeThumb($v, $thumb_url, $size);
				}

			} else { // all normal image fields

				if($v instanceof Pageimages && count($v)) {
					$thumb_url = $page->$field->first()->size($size[0],$size[1])->url;
				} elseif($v instanceof Pageimage && $v) {
					$thumb_url = $page->$field->size($size[0],$size[1])->url;
				}

			}

			if(strlen(trim($thumb_url))) {
				$thumb_url .= "?vt=" . time(); // force reload. maybe not that perfect
				$v = "<span class='label-image'{$styles}><img src='" . $thumb_url . "'/></span>";
				$event->return = $v . " " . $event->return;
			}

		}

	}


	/**
	 * Resize the images just for this module
	 *
	 * not yet sure what should happen with old ones since PW doesn't recognize them
	 *
	 * @param  object $field     ProcessWire Field
	 * @param  string $thumb_url path to the image
	 * @param  string $size      String of the size "w,h"
	 * @return mixed            Either string of the new image or false
	 */
	private function resizeThumb($field, $thumb_url, $size){

		if($field instanceof Pageimage) {
			$path = $field->pagefiles->path();
		} else {
			$path = $field->path();
		}
		$thumb_path = $path . basename($thumb_url);
		$filename = $size[0] . "x" . $size[1] . "_" . basename($thumb_url);
		$thumb_path_new = $path . $filename;

		// if already exists, no need to resize again
		if(file_exists($thumb_path_new)) return $filename;
		if(@copy($thumb_path, $thumb_path_new)){
			$sizer = new ImageSizer($thumb_path_new);
			$sizer->resize($size[0], $size[1]);
			return $filename;
		} else return false;

	}

	/**
	 * Build a form allowing configuration of this Module
	 *
	 */
	public function getModuleConfigInputfields(array $data) {

		$data = array_merge(self::$defaults, $data);

		$fields = new InputfieldWrapper();
		$modules = $this->wire('modules');

		$field = $modules->get("InputfieldTextarea");
		$field->attr('name', 'pageLabelTemplates');
		$field->attr('size', 10);
		$field->attr('value', $data['pageLabelTemplates']);
		$field->label = "Templates";
		$field->description = "Add name(s) of the template(s) along with a field name separated by a comma. wish to output thumbnails. If multiple templates then simply enter each on its own line.";
		$field->notes = "Example: basic-page,image \nOr for croppable images you can define a crop setting (using dot notation): basic-page,image.cropname";
		$field->columnWidth = 100;
		$fields->append($field);


		$field = $modules->get("InputfieldText");
		$field->attr('name', 'pageLabelImageSize');
		$field->attr('size', 10);
		$field->attr('value', $data['pageLabelImageSize']);
		$field->label = "Thumbnail size";
		$field->description = "Thumbnail size. Specify two number comma separated. Will be ignored if field is of type FieldtypeCropImage (thumbnail module).";
		$field->notes = "Example: 100,100 or 0,50";
		$field->columnWidth = 25;
		$fields->append($field);

		$field = $modules->get("InputfieldText");
		$field->attr('name', 'containerWidth');
		$field->attr('size', 10);
		$field->attr('value', $data['containerWidth']);
		$field->label = "Container width";
		$field->description = "Width of the container in css value (px,%,em...)";
		$field->notes = "Example: 100px";
		$field->columnWidth = 25;
		$fields->append($field);

		$field = $modules->get("InputfieldText");
		$field->attr('name', 'containerHeight');
		$field->attr('size', 10);
		$field->attr('value', $data['containerHeight']);
		$field->label = "Container height";
		$field->description = "Height of the container in css value (px,%,em...)";
		$field->notes = "Example: 100px";
		$field->columnWidth = 25;
		$fields->append($field);

		$field = $modules->get("InputfieldText");
		$field->attr('name', 'containerPadding');
		$field->attr('size', 10);
		$field->attr('value', $data['containerPadding']);
		$field->label = "Container padding";
		$field->description = "Padding of the container in css value (px,%,em...)";
		$field->notes = "Example: 10px";
		$field->columnWidth = 25;
		$fields->append($field);



		$field = $modules->get("InputfieldText");
		$field->attr('name', 'backgroundColor');
		$field->attr('size', 10);
		$field->attr('value', $data['backgroundColor']);
		$field->label = "Container background color";
		$field->description = "HEX background color of the container (#444)";
		$field->columnWidth = 25;
		$fields->append($field);

		$field = $modules->get("InputfieldText");
		$field->attr('name', 'borderColor');
		$field->attr('size', 10);
		$field->attr('value', $data['borderColor']);
		$field->label = "Container border color";
		$field->description = "Border color of the container (#000)";
		$field->columnWidth = 25;
		$fields->append($field);

		$field = $modules->get("InputfieldText");
		$field->attr('name', 'textColor');
		$field->attr('size', 10);
		$field->attr('value', $data['textColor']);
		$field->label = "Text color";
		$field->description = "Text color of the container (#aaa)";
		$field->columnWidth = 25;
		$fields->append($field);

		$field = $modules->get("InputfieldText");
		$field->attr('name', 'noImageText');
		$field->attr('size', 10);
		$field->attr('value', $data['noImageText']);
		$field->label = "No-Image Text";
		$field->description = "Text as placeholder if no image populated.";
		$field->columnWidth = 25;
		$fields->append($field);

		return $fields;
	}
}
